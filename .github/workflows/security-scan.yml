name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Enable manual triggering
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pylint
    
    # SAST scanning with Bandit
    - name: Run Bandit SAST scan
      run: |
        bandit -r . -f json -o bandit-results.json || echo "Bandit scan completed with findings"
        echo "Bandit scan results:"
        cat bandit-results.json || echo "No bandit results file found"
      continue-on-error: true
    
    # Dependency scanning with Safety
    - name: Check dependencies for vulnerabilities
      run: |
        safety check -r requirements.txt --json > safety-results.json || echo "Safety scan completed with findings"
        echo "Safety scan results:"
        cat safety-results.json || echo "No safety results file found"
      continue-on-error: true
    
    # Static code analysis with Pylint
    - name: Run Pylint
      run: |
        pylint --disable=C0111,C0103 --output-format=json:pylint-results.json *.py || echo "Pylint scan completed with findings"
        echo "Pylint scan results:"
        cat pylint-results.json || echo "No pylint results file found"
      continue-on-error: true
    
    # Upload security scan results as artifacts
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          safety-results.json
          pylint-results.json
    
    # GitHub CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    # Create and run SARIF conversion script
    - name: Convert Bandit results to SARIF
      if: always()
      run: |
        python3 << 'EOF'
        import json
        import sys
        import os
        from datetime import datetime

        # Read bandit JSON output
        try:
            with open('bandit-results.json', 'r') as f:
                bandit_data = json.load(f)
            print("Successfully loaded bandit results")
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error reading bandit results: {e}")
            # Create empty SARIF file if no results
            empty_sarif = {
                "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                "version": "2.1.0",
                "runs": [
                    {
                        "tool": {
                            "driver": {
                                "name": "Bandit",
                                "informationUri": "https://github.com/PyCQA/bandit",
                                "rules": []
                            }
                        },
                        "results": []
                    }
                ]
            }
            with open("bandit-results.sarif", "w") as f:
                json.dump(empty_sarif, f, indent=2)
            sys.exit(0)

        # Create SARIF structure
        sarif_output = {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
                {
                    "tool": {
                        "driver": {
                            "name": "Bandit",
                            "informationUri": "https://github.com/PyCQA/bandit",
                            "semanticVersion": bandit_data.get("metadata", {}).get("version", "1.7.5"),
                            "rules": []
                        }
                    },
                    "results": [],
                    "invocations": [
                        {
                            "executionSuccessful": True,
                            "endTimeUtc": datetime.utcnow().isoformat() + "Z"
                        }
                    ]
                }
            ]
        }

        # Add rules and results
        rule_indices = {}
        for result in bandit_data.get("results", []):
            issue_id = result.get("test_id", "")
            issue_name = result.get("test_name", "")
            
            # Create rule if not exists
            if issue_id not in rule_indices:
                rule = {
                    "id": issue_id,
                    "name": issue_name,
                    "shortDescription": {
                        "text": issue_name
                    },
                    "helpUri": f"https://bandit.readthedocs.io/en/latest/plugins/index.html#{issue_id.lower()}"
                }
                sarif_output["runs"][0]["tool"]["driver"]["rules"].append(rule)
                rule_indices[issue_id] = len(sarif_output["runs"][0]["tool"]["driver"]["rules"]) - 1
            
            # Add result
            sarif_result = {
                "ruleId": issue_id,
                "ruleIndex": rule_indices[issue_id],
                "level": "warning" if result.get("issue_severity", "") == "MEDIUM" else 
                          "error" if result.get("issue_severity", "") == "HIGH" else "note",
                "message": {
                    "text": result.get("issue_text", "")
                },
                "locations": [
                    {
                        "physicalLocation": {
                            "artifactLocation": {
                                "uri": result.get("filename", "").replace(os.getcwd() + "/", "")
                            },
                            "region": {
                                "startLine": result.get("line_number", 1),
                                "startColumn": 1
                            }
                        }
                    }
                ]
            }
            sarif_output["runs"][0]["results"].append(sarif_result)

        # Write SARIF output
        with open("bandit-results.sarif", "w") as f:
            json.dump(sarif_output, f, indent=2)
        
        print("Conversion to SARIF format completed successfully")
        print(f"Created SARIF file with {len(sarif_output['runs'][0]['results'])} results")
        EOF
    
    - name: Check SARIF file exists
      if: always()
      run: |
        if [ -f "bandit-results.sarif" ]; then
          echo "SARIF file exists"
          echo "SARIF file size: $(wc -c < bandit-results.sarif) bytes"
          echo "First few lines of SARIF file:"
          head -n 10 bandit-results.sarif
        else
          echo "SARIF file does not exist"
          ls -la *.sarif || echo "No SARIF files found"
        fi
    
    - name: Upload SARIF file to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('bandit-results.sarif') != ''
      with:
        sarif_file: bandit-results.sarif
        